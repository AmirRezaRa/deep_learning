# -*- coding: utf-8 -*-
"""prediction_exam_score.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eza-ymQ_ok9Dq346EPlhzWWznpC-2aTY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

df = pd.read_csv('/content/student_habits_performance.csv')
df = pd.DataFrame(df)

df.head()

df.info()

df['parental_education_level'].describe()

df['parental_education_level'] = df['parental_education_level'].fillna(df['parental_education_level'].mode()[0])

df.isna().sum()

cat_col = df.select_dtypes(include='object').columns
cat_col = [col for col in cat_col]
cat_col.remove('student_id')
cat_col

plt.figure(figsize=(9,8))
for i in range(6):
    plt.subplot(2, 3, i+1)  # subplot index starts at 1
    plt.hist(df[cat_col[i]], color='skyblue', edgecolor='black')
    plt.title(f'Distribution of {cat_col[i]}')

plt.tight_layout()
plt.show()

num_col = df.select_dtypes(exclude='object').columns
num_col = [col for col in num_col]
num_col

plt.figure(figsize=(12,12))
for i in range(9):
    plt.subplot(3, 3, i+1)  # subplot index starts at 1
    plt.hist(df[num_col[i]],bins=20, edgecolor='black')
    plt.title(f'Distribution of {num_col[i]}')

plt.tight_layout()
plt.show()

df2 = df.drop('student_id', axis=1)

df2.head()

"""***Label encoding : diet_quality, parental_education, internet_quality***

***One Hot Encoding : gender, part_time_job, extracurricular_participation***
"""

diet_quality = {'Poor': 0, 'Fair': 1, 'Good': 2}
parental_education_level = {'High School' : 0, 'Bachelor' : 1, 'Master' : 2}
internet_quality  = {'Poor' : 0, 'Average' : 1, 'Good' : 2}

df2['dq_e'] = df2['diet_quality'].map(diet_quality)
df2['pel_e'] = df2['parental_education_level'].map(parental_education_level)
df2['iq_e'] = df2['internet_quality'].map(internet_quality)

df2.shape

dummies = pd.get_dummies(df[['gender', 'part_time_job', 'extracurricular_participation']], drop_first=True)

df3 = pd.concat([df2,dummies], axis=1)

df3 = df3.drop(['gender',
          'part_time_job',
          'diet_quality',
          'parental_education_level',
          'internet_quality',
          'extracurricular_participation'], axis=1)
df3.head()

X = df3.drop('exam_score', axis=1)
Y = df3['exam_score']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
lr_model.score(X_test, y_test)

prediction = lr_model.predict(X_test)
print('exam score prediction:  ',prediction[:5])
print('exam score prediction: ', np.array(y_test[:5]))