# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGiGHgX29okjYfonNGU5m8KCr3j0fIiF
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import seaborn as sns
from tensorflow.keras.layers import Normalization, Dense, InputLayer
from tensorflow.keras.losses import MeanSquaredError, MeanAbsoluteError
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
from tensorflow.keras.metrics import RootMeanSquaredError

data = pd.read_csv('/content/train.csv')
data.head()

sns.pairplot(data[["v.id",	"on road old",	"on road now",	"years",	"km",	"rating",	"condition","economy",	"top speed",	"hp",	"torque",	"current price"]], diag_kind = 'kde')

tensor_data = tf.constant(data)
tensor_data = tf.cast(tensor_data, tf.float32)
print(tensor_data)

tensor_data = tf.random.shuffle(tensor_data)
print(tensor_data)

X = tensor_data[:, 3:-1]
Y = tensor_data[:,-1]
Y = tf.expand_dims(Y, axis=1)
print(Y[:5].shape)

train_ratio = 0.8
val_ratio = 0.1
test_ratio = 0.1
dataset_size = len(X)

x_train = X[: int(train_ratio * dataset_size)]
y_train = Y[: int(train_ratio * dataset_size)]

train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))
train_dataset = train_dataset.shuffle(buffer_size = 8, reshuffle_each_iteration=True).batch(32).prefetch(tf.data.AUTOTUNE)

x_val = X[int(train_ratio * dataset_size): int(dataset_size*(train_ratio + val_ratio))]
y_val = Y[int(train_ratio * dataset_size): int(dataset_size*(train_ratio + val_ratio))]
print(x_val.shape)

x_test = X[int(dataset_size*(train_ratio + val_ratio)):]
y_test = Y[int(dataset_size*(train_ratio + val_ratio)):]
print(x_test.shape)

normalizer = Normalization()
normalizer.adapt(x_train)  # is used for mean and std using columns
normalizer(x_train)[:5]

model = tf.keras.Sequential([
    InputLayer(input_shape = (8,)),
    normalizer,
    Dense(32, activation='relu'),
    Dense(32, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1)
])

model.summary()

model.compile(optimizer=Adam(learning_rate=0.1),
              loss = MeanAbsoluteError(),
              metrics = [RootMeanSquaredError()])

history = model.fit(train_dataset , validation_data= val_dataset, epochs=100, verbose=1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val_loss'])
plt.show()

model.evaluate(x_test,y_test)

y_pred = model.predict(x_test)[:,0]
y_true = y_test[:,0]

model.predict(tf.expand_dims(x_test[0], axis=0))

ind = np.arange(100)
plt.figure(figsize =(40,20))
plt.bar(ind, y_pred, width=0.4, label = 'Predicted car price')
plt.bar(ind + 0.4, y_true, width=0.4, label = 'Actual Car price')
plt.show()