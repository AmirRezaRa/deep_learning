# -*- coding: utf-8 -*-
"""cancer_breast_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fVl3qBBpp9PM7R_xbFIYH_s9Usw1VIsT
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras import Sequential, layers, optimizers, Input
from tensorflow.keras.optimizers import Adam

import kagglehub

# Download latest version
path = kagglehub.dataset_download("uciml/breast-cancer-wisconsin-data")

print("Path to dataset files:", path)

for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv("/kaggle/input/breast-cancer-wisconsin-data/data.csv")
df.head(10)

df.info()

df.drop(columns=['Unnamed: 32', 'id'], inplace=True)

df["diagnosis"].value_counts().plot(kind="bar")

plt.xlabel("Diagnosis")
plt.ylabel("Frequency")
plt.title("Frequency per Diagnosis")
plt.xticks(rotation=0)
plt.show()
df["diagnosis"].value_counts()

df["diagnosis"] = LabelEncoder().fit_transform(df["diagnosis"])

df["diagnosis"]

"""## ***Preprocessing***"""

x = df.drop(columns='diagnosis')
y = df['diagnosis']

scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

# x_scaled_df = pd.DataFrame(x_scaled, columns=x.columns)
# x_scaled_df.head()

x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2, random_state = 1)

x_train.shape

"""***model_training***"""

model = Sequential([
    Input(shape=(30,)),
    layers.Dense(60, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(30, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(15, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid'),
])

model.compile(
    optimizer = Adam(0.01),
    loss = 'binary_crossentropy',
    metrics=['accuracy']
)

historty = model.fit(x_train, y_train, epochs=30, batch_size=8)

plt.plot(historty.history['loss'])
# plt.plot(history.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train'])
plt.show()

model.evaluate(x_test, y_test)

prediction = model.predict(x_test).reshape(-1)

prediction = np.round(prediction)
print(prediction[:10])

from sklearn.metrics import classification_report
print(classification_report(y_test, prediction))

print(y_test[:10])